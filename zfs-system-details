#!/bin/bash
#emacs: -*- mode: shell-script; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t -*-
#ex: set sts=4 ts=4 sw=4 noet:
#
#
# COPYRIGHT: Yaroslav Halchenko 2015
#
# LICENSE: MIT
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#

set -eu

host=${1:-smaug.dartmouth.edu}
dn=zfs_system_details_$(date +"20%y%m%d") # _%H%M%S")
d=/tmp/$dn
mkdir -p $d



function info () {
	echo "I: $@"
}

function warn () {
	echo "W: $@"
}

function section() {
	echo -e "\n## $@:"
}

function warn_pkg() {
	warn "Install ${2:-$1} pkg. No $1 output is provided"
}

function log_cmd() {
	cmd=$1
	pkg=${2:-$1}
	eval "$cmd > $d/$cmd" || warn_pkg $cmd $pkg
}

function log_cat() {
	f=$1
	out=${2:-$(basename $f)}
	cat $f > $d/$out || warn "Can't cat $f. Not $out output is provided"
	}

function collect_logs() {
	cp /var/log/kern.log $d/
	log_cat /proc/spl/kstat/zfs/arcstats
	log_cat /proc/spl/kmem/slab
	log_cat /proc/slabinfo
	log_cmd lspci pciutils
	log_cmd lscpu util-linux
	log_cmd dmidecode
}

function collect_system_info() {
	info=$d/system-info.txt
	echo "# Information about the system" > $info

	uname -a >> $info

	section free >> $info
	free >> $info

	section ZFS modules >> $info
	for m in  zfs spl; do
		echo "Module: $m" >> $info
		/sbin/modinfo $m | grep -v '^parm' >> $info || echo "no module $m loaded" >> $info
		echo "" >> $info
	done

	section "/etc/modprobe.d/zfs.conf" >> $info
	cat /etc/modprobe.d/zfs.conf >> $info || echo "no file zfs.conf" >> $info

	section "Active module parameters" >> $info
	{ for param in /sys/module/{spl,zfs}/parameters/*; do
		  printf "%-50s" `basename $param`; cat $param || echo "Can't cat $param"; done;
	} >> $info
	# Lame way:
	# grep . /sys/module/zfs/parameters/* >> $info

	if which dpkg > /dev/null; then
		section "ZFS packages" >> $info
		{ dpkg -l | grep '^ii.*zfs' || echo "no zfs pkgs"; } >> $info
	fi

	if `which dmidecode >/dev/null`; then
		section "memory hardware details (dmidecode --type memory)" >> $info
		dmidecode  --type memory >> $info
	else
		warn "Install dmidecode to report details about memory modules"
	fi

	section cpuinfo >> $info
	cat /proc/cpuinfo >> $info
}

function collect_data_info() {
	info=$d/data-info.txt

	echo "# Information about data (pool, datasets/partitions)" > $info

	if ! which zpool >/dev/null; then
		echo "no zpool cmd available - skipped" >> $info
		warn "no zpool cmd"
		return
	fi
	section "zpool status" >> $info
	zpool status -v >> $info

	section "zpool list -v" >> $info
	zpool list -v >> $info

	section "zfs list" >> $info
	zfs list >> $info

	section "zpool get all" >> $info
	{ timeout --kill-after 6 3 zpool get all 2>&1 || echo "TIMEDOUT(KILLED)" >> $info; } >> $info

	# zfs get all found to hang in my case, so use time out here and above
	section "zfs get all" >> $info
	{ timeout --kill-after 6 3 zfs get all 2>&1 || echo "TIMEDOUT(KILLED)" >> $info; } >> $info

}

function collect_traces() {
	# produce traces if not present yet
	/bin/ls -l /proc/?/task/*/stack | grep -q . || { echo t > /proc/sysrq-trigger ; }
	{
	cd /proc
	/bin/ls -d [1-9]* | sort -n \
	| while read pid; do
	  echo "## $pid:"
	  cat /proc/$pid/cmdline 2>/dev/null || :
	  echo
	  for task in /proc/$pid/task/*
	  do
		cat $task/stack 2>/dev/null || :
	  done
	done
	} > $d/stacktraces.txt
}

function prep_for_online {
	echo "Options Indexes" >> $d/.htaccess
	chmod a+rX -R $d
}

R_USER=
R_HOST=
R_PATH=
R_WWW=
R_WWW_PATH=
[ ! -e $HOME/.zfs-system-details ] || . $HOME/.zfs-system-details

function upload_online {
	info "Uploading online"
	rsync -a $d -e ssh $R_USER@$R_HOST:$R_PATH
	info "$R_WWW/$R_WWW_PATH/$dn"
}

info "collecting information under $d"

collect_logs
collect_system_info
collect_data_info
collect_traces

prep_for_online

[ -z "$R_HOST" ] || upload_online
